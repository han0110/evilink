// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class FlipCoin extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save FlipCoin entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save FlipCoin entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("FlipCoin", id.toString(), this);
  }

  static load(id: string): FlipCoin | null {
    return store.get("FlipCoin", id) as FlipCoin | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get jackpot(): BigInt {
    let value = this.get("jackpot");
    return value.toBigInt();
  }

  set jackpot(value: BigInt) {
    this.set("jackpot", Value.fromBigInt(value));
  }
}

export class Player extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Player entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Player entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Player", id.toString(), this);
  }

  static load(id: string): Player | null {
    return store.get("Player", id) as Player | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get balance(): BigInt {
    let value = this.get("balance");
    return value.toBigInt();
  }

  set balance(value: BigInt) {
    this.set("balance", Value.fromBigInt(value));
  }

  get netReward(): BigInt {
    let value = this.get("netReward");
    return value.toBigInt();
  }

  set netReward(value: BigInt) {
    this.set("netReward", Value.fromBigInt(value));
  }

  get playCount(): BigInt {
    let value = this.get("playCount");
    return value.toBigInt();
  }

  set playCount(value: BigInt) {
    this.set("playCount", Value.fromBigInt(value));
  }

  get playWinCount(): BigInt {
    let value = this.get("playWinCount");
    return value.toBigInt();
  }

  set playWinCount(value: BigInt) {
    this.set("playWinCount", Value.fromBigInt(value));
  }

  get playLoseCount(): BigInt {
    let value = this.get("playLoseCount");
    return value.toBigInt();
  }

  set playLoseCount(value: BigInt) {
    this.set("playLoseCount", Value.fromBigInt(value));
  }
}

export class PlayEvent extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save PlayEvent entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save PlayEvent entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("PlayEvent", id.toString(), this);
  }

  static load(id: string): PlayEvent | null {
    return store.get("PlayEvent", id) as PlayEvent | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get player(): Bytes {
    let value = this.get("player");
    return value.toBytes();
  }

  set player(value: Bytes) {
    this.set("player", Value.fromBytes(value));
  }

  get side(): boolean {
    let value = this.get("side");
    return value.toBoolean();
  }

  set side(value: boolean) {
    this.set("side", Value.fromBoolean(value));
  }
}
